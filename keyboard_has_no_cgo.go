//go:build !cgo
// +build !cgo

package TermUI

import (
	"bytes"
	"unicode/utf16"
	"unicode/utf8"

	"github.com/jezek/xgb"
	"github.com/jezek/xgb/xproto"
)

const (
	DeleteChar 		string = ""
)

var (
	HoldingShift 	int 	= -1
	HoldingAlt 		int 	= -1
	HoldingCtrl 	int 	= -1
	HoldingSuper 	int 	= -1
)

var plain_map = []uint16{
	0xf200,	0xf01b,	0xf031,	0xf032,	0xf033,	0xf034,	0xf035,	0xf036,
	0xf037,	0xf038,	0xf039,	0xf030,	0xf02d,	0xf03d,	0xf07f,	0xf009,
	0xfb71,	0xfb77,	0xfb65,	0xfb72,	0xfb74,	0xfb79,	0xfb75,	0xfb69,
	0xfb6f,	0xfb70,	0xf05b,	0xf05d,	0xf201,	0xf702,	0xfb61,	0xfb73,
	0xfb64,	0xfb66,	0xfb67,	0xfb68,	0xfb6a,	0xfb6b,	0xfb6c,	0xf03b,
	0xf027,	0xf060,	0xf700,	0xf05c,	0xfb7a,	0xfb78,	0xfb63,	0xfb76,
	0xfb62,	0xfb6e,	0xfb6d,	0xf02c,	0xf02e,	0xf02f,	0xf700,	0xf30c,
	0xf703,	0xf020,	0xf207,	0xf100,	0xf101,	0xf102,	0xf103,	0xf104,
	0xf105,	0xf106,	0xf107,	0xf108,	0xf109,	0xf208,	0xf209,	0xf307,
	0xf308,	0xf309,	0xf30b,	0xf304,	0xf305,	0xf306,	0xf30a,	0xf301,
	0xf302,	0xf303,	0xf300,	0xf310,	0xf206,	0xf200,	0xf03c,	0xf10a,
	0xf10b,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf30e,	0xf702,	0xf30d,	0xf20e,	0xf701,	0xf205,	0xf114,	0xf603,
	0xf118,	0xf601,	0xf602,	0xf117,	0xf600,	0xf119,	0xf115,	0xf116,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf11d,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
}

var shift_map = []uint16{
	0xf200,	0xf01b,	0xf021,	0xf040,	0xf023,	0xf024,	0xf025,	0xf05e,
	0xf026,	0xf02a,	0xf028,	0xf029,	0xf05f,	0xf02b,	0xf07f,	0xf809,
	0xfb51,	0xfb57,	0xfb45,	0xfb52,	0xfb54,	0xfb59,	0xfb55,	0xfb49,
	0xfb4f,	0xfb50,	0xf07b,	0xf07d,	0xf201,	0xf702,	0xfb41,	0xfb53,
	0xfb44,	0xfb46,	0xfb47,	0xfb48,	0xfb4a,	0xfb4b,	0xfb4c,	0xf03a,
	0xf022,	0xf07e,	0xf700,	0xf07c,	0xfb5a,	0xfb58,	0xfb43,	0xfb56,
	0xfb42,	0xfb4e,	0xfb4d,	0xf03c,	0xf03e,	0xf03f,	0xf700,	0xf30c,
	0xf703,	0xf020,	0xf207,	0xf10c,	0xf10d,	0xf10e,	0xf10f,	0xf110,
	0xf111,	0xf112,	0xf113,	0xf11e,	0xf11f,	0xf208,	0xf203,	0xf307,
	0xf308,	0xf309,	0xf30b,	0xf304,	0xf305,	0xf306,	0xf30a,	0xf301,
	0xf302,	0xf303,	0xf300,	0xf310,	0xf206,	0xf200,	0xf03e,	0xf120,
	0xf121,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf30e,	0xf702,	0xf30d,	0xf20e,	0xf701,	0xf205,	0xf114,	0xf603,
	0xf20b,	0xf601,	0xf602,	0xf117,	0xf600,	0xf20a,	0xf115,	0xf116,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf11d,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,	0xf200,
}


func DecodeKey(kc xproto.Keycode) (string) {
	// get the utf-16 keycode that matches to our key but subtract it by fucking 8.
	// (this is stupidly consistent and i don't fucking know why)
	var kcim uint16 // KeyCodeInMap
	if(HoldingShift > 0) {
		kcim = shift_map[kc-8]
	} else {
		kcim = plain_map[kc-8]
	}
	if(kcim == 0xf07f) {
		return ""
	}

	// convert it to utf8 (using golang's crackhead methods)
	ret := &bytes.Buffer{}
	bytebuf := make([]byte, 1)
	uint16s := make([]uint16, 1)

	switch(kcim) {
		case 62976: return NameDownArrow
		case 62977: return NameLeftArrow
		case 62978: return NameRightArrow
		case 62979: return NameUpArrow
		case 61953: return NameEnter
		case 1467:  return NameEscape
		case 61716: return NameHome
		case 61719: return NameEnd
		case 61718: return ""
		case 61717: return NamePageUp
		case 61720: return NamePageDown
		case 61449: return NameTab
		case 61696: return NameF1
		case 61697: return NameF2
		case 61698: return NameF3
		case 61699: return NameF4
		case 61700: return NameF5
		case 61701: return NameF6
		case 61702: return NameF7
		case 61703: return NameF8
		case 61704: return NameF9
		case 61705: return NameF10
		case 61706: return NameF11
		case 61707: return NameF12
		case 63232: 
			HoldingShift *= -1
			return "­"
		case 63233: 
			HoldingAlt *= -1
			return "­"
		case 63234: 
			HoldingCtrl *= -1
			return "­"
		case 61952:
			HoldingSuper *= -1
			return "­"


	}

	// the first two bytes in the utf16 value aren't actaully useful to us and only exist to throw
	// off the final letter. golang's way of working with bits is messy (and i couldn't even get it
	// working right) so we'll just subtract accordingly
	// todo: find out how to get the last two bits because it's probably faster and more predictable 
	switch {
		case (kcim >= 0xf000 && kcim <= 0xf0ff): uint16s[0] = kcim-0xf000
		case (kcim >= 0xf100 && kcim <= 0xf1ff): uint16s[0] = kcim-0xf100
		case (kcim >= 0xf200 && kcim <= 0xf2ff): uint16s[0] = kcim-0xf200
		case (kcim >= 0xf300 && kcim <= 0xf3ff): uint16s[0] = kcim-0xf300
		case (kcim >= 0xf400 && kcim <= 0xf4ff): uint16s[0] = kcim-0xf400
		case (kcim >= 0xf500 && kcim <= 0xf5ff): uint16s[0] = kcim-0xf500
		case (kcim >= 0xf600 && kcim <= 0xf6ff): uint16s[0] = kcim-0xf600
		case (kcim >= 0xf700 && kcim <= 0xf7ff): uint16s[0] = kcim-0xf700
		case (kcim >= 0xf800 && kcim <= 0xf8ff): uint16s[0] = kcim-0xf800
		case (kcim >= 0xf900 && kcim <= 0xf9ff): uint16s[0] = kcim-0xf900
		case (kcim >= 0xfa00 && kcim <= 0xfaff): uint16s[0] = kcim-0xfa00
		case (kcim >= 0xfb00 && kcim <= 0xfbff): uint16s[0] = kcim-0xfb00
		case (kcim >= 0xfc00 && kcim <= 0xfcff): uint16s[0] = kcim-0xfc00
		case (kcim >= 0xfd00 && kcim <= 0xfdff): uint16s[0] = kcim-0xf600
		case (kcim >= 0xfe00 && kcim <= 0xfeff): uint16s[0] = kcim-0xfe00
		case (kcim >= 0xff00 && kcim <= 0xffff): uint16s[0] = kcim-0xff00
	}

	// finally decode the value
	foo := utf16.Decode(uint16s)
	_ = utf8.EncodeRune(bytebuf, foo[0])
	ret.Write(bytebuf)

	return ret.String()
}

// We have functions to call an unexported function because under cgo these can't be
// run as go routines, but without it they can, so if we have the opprutunity we should 
// run these on seperate threads.

func (win *Window) CheckKeyRelease(ev xgb.Event) {
	go win.checkKeyRelease(ev)
}
func (win *Window) CheckKeyPress(ev xgb.Event) {
	go win.checkKeyPress(ev)
}